<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

namespace Laasti\Stack;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

/**
 * Description of Stack
 *
 * @author Sonia
 */
class Stack implements StackInterface
{

    /**
     * Contains the registered middlewares
     * @var array
     */
    protected $middlewares = [];

    /**
     * Contains the registered terminable middlewares
     * @var array
     */
    protected $terminableMiddlewares = [];

    /**
     * Adds the middleware at the beginning.
     * You can pass additional arguments to the method. They will be used when calling handle/close methods.
     *
     * @param MiddlewareInterface $middleware
     * @return \Laasti\Stack\Stack
     */
    public function unshift(MiddlewareInterface $middleware)
    {
        array_unshift($this->middlewares, func_get_args());

        if ($middleware instanceof MiddlewareTerminableInterface) {
            array_unshift($this->terminableMiddlewares, func_get_args());
        }
        return $this;
    }

    //TODO: Should it be permitted for a terminate only middleware to be added?
    //Maybe it would be better to have a middleware that calls those terminate only objects
    /**
     * Adds the middleware at the end.
     * You can pass additional arguments to the method. They will be used when calling handle/close methods.
     *
     * @param MiddlewareInterface $middleware
     * @return \Laasti\Stack\Stack
     */
    public function push(MiddlewareInterface $middleware)
    {
        array_push($this->middlewares, func_get_args());

        if ($middleware instanceof MiddlewareTerminableInterface) {
            array_push($this->terminableMiddlewares, func_get_args());
        }

        return $this;
    }

    /**
     * Loops through all registered middlewares until a response is returned.
     *
     * @throws StackException When no response is returned
     * @param Request $request
     * @return Response
     */
    public function execute(Request $request)
    {

        foreach ($this->middlewares as $key => $spec) {
            //Get the middleware
            $middleware = array_shift($spec);
            //Put request as first parameter for the middleware
            array_unshift($spec, $request);

            $return = call_user_func_array([$middleware, 'handle'], $spec);

            if ($return instanceof Response) {
                return $return;
            }
        }

        throw new StackException('No response generated by the middleware stack.');
    }

    /**
     * Loops through all TerminableMiddleware
     *
     * @param Request $request
     * @param Response $response
     */
    public function close(Request $request, Response $response)
    {

        $inverted = array_reverse($this->terminableMiddlewares);

        foreach ($inverted as $spec) {
            $middleware = array_shift($spec);

            $args = array_merge(array($request, $response), $spec);

            call_user_func_array([$middleware, 'terminate'], $args);
        }
    }

}
